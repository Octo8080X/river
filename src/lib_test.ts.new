Deno.test("Result型 - 自動型推論: リテラル型のUnion型を推論", async () => {
  // このテストではリテラル型のUnion型が正しく推論されることを確認
  const f1 = () => success(42);
  const f2: (n: number) => Result<string, "TYPE_A_ERROR"> = (n) => {
    if (n > 100) {
      return failure(n.toString(), ["TYPE_A_ERROR"]);
    }
    return success(n.toString());
  };
  const f3: (s: string) => Result<boolean, "TYPE_B_ERROR"> = (s) => {
    if (s.length < 2) {
      return failure(false, ["TYPE_B_ERROR"]);
    }
    return success(true);
  };
  
  const pipeline = pipeAsyncResult(f1, f2, f3);
  
  // recoveryFuncで型注釈なしで "TYPE_A_ERROR" | "TYPE_B_ERROR" のUnion型が推論されるか
  const result = await pipeline.run(error => {
    // 型推論の検証: error.errorsがリテラル型の配列であることをチェック
    const errorTypes = error.errors;
    
    // リテラル型の判定
    if (errorTypes.includes("TYPE_A_ERROR")) {
      console.log("TYPE_A_ERRORを検出");
    } else if (errorTypes.includes("TYPE_B_ERROR")) {
      console.log("TYPE_B_ERRORを検出");
    } else {
      console.log("未知のエラータイプ:", errorTypes);
    }
    
    // error.valueはnumber | stringのUnion型として推論されるか
    console.log("エラー値の型:", typeof error.value);
    
    return success(false);
  });
  
  assertEquals(isSuccess(result), true);
});
